{"version":3,"sources":["components/movieCard.js","components/movieList.js","components/autoComplete.js","containers/App.js","serviceWorker.js","index.js"],"names":["MovieCard","props","className","style","title","producer","date","description","MovieList","movies","map","movie","i","key","id","release_date","useStyles","makeStyles","theme","root","flexGrow","height","container","position","paper","zIndex","marginTop","spacing","left","right","chip","margin","inputRoot","flexWrap","inputInput","width","divider","IntegrationDownshift","suggestions","classes","searchIcon","icon","faSearch","onChange","searchChange","getInputProps","getItemProps","getLabelProps","getMenuProps","highlightedIndex","inputValue","isOpen","selectedItem","placeholder","onBlur","onFocus","inputProps","InputProps","ref","other","TextField","inputRef","input","renderInput","fullWidth","label","InputLabelProps","shrink","Paper","square","value","showEmpty","deburr","trim","toLowerCase","inputLength","length","count","filter","suggestion","keep","slice","getSuggestions","index","suggestionProps","itemProps","isHighlighted","isSelected","indexOf","MenuItem","selected","component","fontWeight","renderSuggestion","item","App","event","setState","searchField","resetForm","baseState","state","fetch","result","json","data","this","filteredMovies","includes","type","onClick","m","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e4116bd9.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst MovieCard = (props) => {\r\n    return (\r\n        <div>\r\n            <div>\r\n                <div className=\"card\" style={{ \"width\": \"100%\" }}>\r\n                    <div className=\"card-body\">\r\n                        <h5 className=\"card-title\">{props.title}</h5>\r\n                        <h6 className=\"card-subtitle mb-2 text-muted\">{props.producer}, {props.date}</h6>\r\n                        <p className=\"card-text\">{props.description}</p>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default MovieCard;","import React from 'react';\r\nimport MovieCard from './movieCard.js';\r\n\r\nconst MovieList = ({ movies }) => {\r\n    return (\r\n\r\n        <div className=\"card-columns align-content-center flex-wrap\">\r\n            {\r\n                movies.map((movie, i) => {\r\n                    return (\r\n                        <MovieCard\r\n                            key={i}\r\n                            id={movie.id}\r\n                            title={movie.title}\r\n                            description={movie.description}\r\n                            producer={movie.producer}\r\n                            date={movie.release_date}\r\n                        />\r\n                    );\r\n                })\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default MovieList;","import React from 'react';\r\n//imports for the autocomplete functionality\r\nimport PropTypes from 'prop-types';\r\nimport deburr from 'lodash/deburr';\r\nimport Downshift from 'downshift';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\n//imports for the search icon\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faSearch } from '@fortawesome/free-solid-svg-icons';\r\n\r\n\r\n\r\nfunction renderInput(inputProps) {\r\n    const { InputProps, classes, ref, searchChange, ...other } = inputProps;\r\n\r\n    return (\r\n        <TextField\r\n            InputProps={{\r\n                inputRef: ref,\r\n                classes: {\r\n                    root: classes.inputRoot,\r\n                    input: classes.inputInput,\r\n                },\r\n                ...InputProps,\r\n            }}\r\n            {...other}\r\n        />\r\n    );\r\n}\r\n\r\nrenderInput.propTypes = {\r\n    classes: PropTypes.object.isRequired,\r\n    InputProps: PropTypes.object,\r\n};\r\n\r\nfunction renderSuggestion(suggestionProps) {\r\n    const { suggestion, index, itemProps, highlightedIndex, selectedItem } = suggestionProps;\r\n    const isHighlighted = highlightedIndex === index;\r\n    const isSelected = (selectedItem || '').indexOf(suggestion.label) > -1;\r\n\r\n    return (\r\n        <MenuItem\r\n            {...itemProps}\r\n            key={suggestion.label}\r\n            selected={isHighlighted}\r\n            component=\"div\"\r\n            style={{\r\n                fontWeight: isSelected ? 500 : 400,\r\n            }}\r\n        >\r\n            {suggestion.label}\r\n        </MenuItem>\r\n    );\r\n}\r\n\r\nrenderSuggestion.propTypes = {\r\n    highlightedIndex: PropTypes.oneOfType([PropTypes.oneOf([null]), PropTypes.number]).isRequired,\r\n    index: PropTypes.number.isRequired,\r\n    itemProps: PropTypes.object.isRequired,\r\n    selectedItem: PropTypes.string.isRequired,\r\n    suggestion: PropTypes.shape({\r\n        label: PropTypes.string.isRequired,\r\n    }).isRequired,\r\n};\r\n\r\nfunction getSuggestions(value, suggestions, { showEmpty = true } = {}) {\r\n    const inputValue = deburr(value.trim()).toLowerCase();\r\n    const inputLength = inputValue.length;\r\n    let count = 0;\r\n\r\n    return inputLength === 0 && !showEmpty\r\n        ? []\r\n        : suggestions.filter(suggestion => {\r\n            const keep =\r\n                count < 5 && suggestion.label.slice(0, inputLength).toLowerCase() === inputValue;\r\n\r\n            if (keep) {\r\n                count += 1;\r\n            }\r\n\r\n            return keep;\r\n        });\r\n}\r\n\r\n\r\n//styles for the auto complete\r\nconst useStyles = makeStyles(theme => ({\r\n    root: {\r\n        flexGrow: 1,\r\n        height: 100,\r\n    },\r\n    container: {\r\n        flexGrow: 1,\r\n        position: 'relative',\r\n    },\r\n    paper: {\r\n        position: 'absolute',\r\n        zIndex: 1,\r\n        marginTop: theme.spacing(1),\r\n        left: 0,\r\n        right: 0,\r\n    },\r\n    chip: {\r\n        margin: theme.spacing(0.5, 0.25),\r\n    },\r\n    inputRoot: {\r\n        flexWrap: 'wrap',\r\n    },\r\n    inputInput: {\r\n        width: 'auto',\r\n        flexGrow: 1,\r\n    },\r\n    divider: {\r\n        height: theme.spacing(2),\r\n    },\r\n}));\r\n\r\n\r\nexport default function IntegrationDownshift(props) {\r\n    let suggestions = props.movies;\r\n    const classes = useStyles();\r\n    const searchIcon = <FontAwesomeIcon icon={faSearch} />\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n\r\n            <div className=\"input-group-prepend\">\r\n                <span className=\"input-group-text\" id=\"inputGroup-sizing-default\">{searchIcon}</span>\r\n\r\n                <Downshift id=\"downshift-simple\" onChange={props.searchChange}>\r\n                    {({\r\n                        getInputProps,\r\n                        getItemProps,\r\n                        getLabelProps,\r\n                        getMenuProps,\r\n                        highlightedIndex,\r\n                        inputValue,\r\n                        isOpen,\r\n                        selectedItem,\r\n                    }) => {\r\n                        const { onBlur, onFocus, ...inputProps } = getInputProps({\r\n                            placeholder: 'Search...',\r\n                        });\r\n\r\n                        return (\r\n                            <div className={classes.container}>\r\n                                {renderInput({\r\n                                    fullWidth: true,\r\n                                    classes,\r\n                                    label: 'Movie Title',\r\n                                    InputLabelProps: getLabelProps({ shrink: true }),\r\n                                    InputProps: { onBlur, onFocus },\r\n                                    inputProps,\r\n                                })}\r\n\r\n                                <div {...getMenuProps()}>\r\n                                    {isOpen ? (\r\n                                        <Paper className={classes.paper} square>\r\n                                            {getSuggestions(inputValue, suggestions).map((suggestion, index) =>\r\n                                                renderSuggestion({\r\n                                                    suggestion,\r\n                                                    index,\r\n                                                    itemProps: getItemProps({ item: suggestion.label }),\r\n                                                    highlightedIndex,\r\n                                                    selectedItem,\r\n                                                }),\r\n                                            )}\r\n                                        </Paper>\r\n                                    ) : null}\r\n                                </div>\r\n                            </div>\r\n                        );\r\n                    }}\r\n                </Downshift>\r\n            </div>\r\n\r\n            <div className={classes.divider} />\r\n        </div>\r\n    );\r\n}","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport MovieList from '../components/movieList';\r\nimport IntegrationDownshift from '../components/autoComplete';\r\n\r\n\r\n\r\nclass App extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            movies: [],\r\n            searchField: \"\"\r\n        }\r\n        this.baseState = this.state.searchField;\r\n    }\r\n\r\n    async componentDidMount() {\r\n        const url = 'https://ghibliapi.herokuapp.com/films/';\r\n        const result = await fetch(url);\r\n        const data = await result.json();\r\n        this.setState({ movies: data });\r\n    }\r\n\r\n\r\n\r\n\r\n    searchChange = (event) => {\r\n        this.setState({ searchField: event });\r\n    }\r\n\r\n    resetForm = () => {\r\n        this.setState({ searchField: this.baseState });\r\n    }\r\n\r\n\r\n\r\n    render() {\r\n        let filteredMovies = this.state.movies.filter(movies => {\r\n            return movies.title.toLowerCase().includes(this.state.searchField.toLowerCase());\r\n        });\r\n        return (\r\n\r\n            <div className=\"App\">\r\n                <div className=\"App-header\">\r\n                    <div className=\"title\">\r\n                        <button type=\"button\"\r\n                            className=\"btn btn-outline-light btn-lg\"\r\n                            onClick={this.resetForm}>\r\n                                Ghibli Films\r\n                         </button>\r\n                    </div>\r\n                </div>\r\n                <IntegrationDownshift\r\n                    searchChange={this.searchChange}\r\n                    movies={this.state.movies.map(m => { return { label: m.title.toLowerCase() } })}\r\n                />\r\n                <MovieList movies={filteredMovies} />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}